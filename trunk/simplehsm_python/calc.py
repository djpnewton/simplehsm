""" calc.py --

 UI generated by GUI Builder Build 146 on 2009-05-13 11:37:30 from:
    C:/projects/simplehsm/simplehsm_python/calc.ui
 This file is auto-generated.  Only the code within
    '# BEGIN USER CODE (global|class)'
    '# END USER CODE (global|class)'
 and code inside the callback subroutines will be round-tripped.
 The 'main' function is reserved.
"""

from Tkinter import *
from calc_ui import Calc

# BEGIN USER CODE global
from calc_hsm import *
# END USER CODE global

class CustomCalc(Calc):
    pass

    # BEGIN CALLBACK CODE
    # ONLY EDIT CODE INSIDE THE def FUNCTIONS.

    # _button_0_command --
    #
    # Callback to handle _button_0 widget option -command
    def _button_0_command(self, *args):
        self.hsm.SignalCurrentState(StateEvent(SIG_DIGIT_0))

    # _button_1_command --
    #
    # Callback to handle _button_1 widget option -command
    def _button_1_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_DIGIT_1_9, '1'))

    # _button_2_command --
    #
    # Callback to handle _button_2 widget option -command
    def _button_2_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_DIGIT_1_9, '2'))

    # _button_3_command --
    #
    # Callback to handle _button_3 widget option -command
    def _button_3_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_DIGIT_1_9, '3'))
        pass

    # _button_4_command --
    #
    # Callback to handle _button_4 widget option -command
    def _button_4_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_DIGIT_1_9, '4'))
        pass

    # _button_5_command --
    #
    # Callback to handle _button_5 widget option -command
    def _button_5_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_DIGIT_1_9, '5'))
        pass

    # _button_6_command --
    #
    # Callback to handle _button_6 widget option -command
    def _button_6_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_DIGIT_1_9, '6'))
        pass

    # _button_7_command --
    #
    # Callback to handle _button_7 widget option -command
    def _button_7_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_DIGIT_1_9, '7'))
        pass

    # _button_8_command --
    #
    # Callback to handle _button_8 widget option -command
    def _button_8_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_DIGIT_1_9, '8'))
        pass

    # _button_9_command --
    #
    # Callback to handle _button_9 widget option -command
    def _button_9_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_DIGIT_1_9, '9'))

    # _button_add_command --
    #
    # Callback to handle _button_add widget option -command
    def _button_add_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_OPERATOR, '+'))

    # _button_clear_command --
    #
    # Callback to handle _button_clear widget option -command
    def _button_clear_command(self, *args):
        self.hsm.SignalCurrentState(StateEvent(SIG_CLEAR))

    # _button_clear_entry_command --
    #
    # Callback to handle _button_clear_entry widget option -command
    def _button_clear_entry_command(self, *args):
        self.hsm.SignalCurrentState(StateEvent(SIG_CLEAR_ENTRY))

    # _button_divide_command --
    #
    # Callback to handle _button_divide widget option -command
    def _button_divide_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_OPERATOR, '/'))

    # _button_dot_command --
    #
    # Callback to handle _button_dot widget option -command
    def _button_dot_command(self, *args):
        self.hsm.SignalCurrentState(StateEvent(SIG_POINT))

    # _button_equals_command --
    #
    # Callback to handle _button_equals widget option -command
    def _button_equals_command(self, *args):
        self.hsm.SignalCurrentState(StateEvent(SIG_EQUALS))

    # _button_multiply_command --
    #
    # Callback to handle _button_multiply widget option -command
    def _button_multiply_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_OPERATOR, '*'))

    # _button_percent_command --
    #
    # Callback to handle _button_percent widget option -command
    def _button_percent_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_OPERATOR, '%'))

    # _button_subtract_command --
    #
    # Callback to handle _button_subtract widget option -command
    def _button_subtract_command(self, *args):
        self.hsm.SignalCurrentState(CalcEvent(SIG_OPERATOR, '-'))

    # _entry_invalidcommand --
    #
    # Callback to handle _entry widget option -invalidcommand
    def _entry_invalidcommand(self, *args):
        pass

    # _entry_validatecommand --
    #
    # Callback to handle _entry widget option -validatecommand
    def _entry_validatecommand(self, *args):
        pass

    # _entry_xscrollcommand --
    #
    # Callback to handle _entry widget option -xscrollcommand
    def _entry_xscrollcommand(self, *args):
        pass

    # END CALLBACK CODE

    # BEGIN USER CODE class
    root = None
    hsm = None
    
    def __init__(self, root):
        Calc.__init__(self, root)
        self.root = root
        self.hsm = CalcHsm(self._entry)
    # END USER CODE class

def main():
    # Standalone Code Initialization
    # DO NOT EDIT
    try: userinit()
    except NameError: pass
    root = Tk()
    demo = CustomCalc(root)
    root.title('calc')
    try: run()
    except NameError: pass
    root.protocol('WM_DELETE_WINDOW', root.quit)
    root.mainloop()

if __name__ == '__main__': main()
